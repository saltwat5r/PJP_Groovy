Zadania do wykonania

Zad. 1 (2 p.)

Napisać funkcję odnajdującą maksimum z przekazanej listy obiektów (liczb, napisów) i zwracającą wartość maksymalną
oraz pozycje (indeksy) listy na których ta wartość się znajduje. Użyć konstrukcji  eachWithIndex.

Pomoc: zwracamy listę w postaci [ maxValue, [ ind1. ind2, ... indN ]]

Poniższy programik, uzywający naszej funkcji maximum:
(maxVal, indList) = maximum( [5, 3, 5, 5, 1, 5] )
println "Maximum: $maxVal"
println "Indexes: $indList"

(maxVal, indList) = maximum(['a', 'c', 'c', 'c', 'b'])
println "Maximum: $maxVal"
println "Indexes: $indList"
powinien wyprowadzić:

Maximum: 5
Indexes: [0, 2, 3, 5]
Maximum: c
Indexes: [1, 2, 3]

Zad. 2 (bardzo łatwe - 2 p.)
Napisać funkcję List getInts(), która prosi o podanie szeregu liczb całkowitych w dialogu wejściowym i zwraca listę
wprowadzonych liczb (jako obiektów typu Integer). Nie dopuścić do wprowadzenia wadliwych danych (ponowienie dialogu do poprawki).

Pomoc (ew. pokazanie wadliwych danych w dialogu do poprawki):
public static String showInputDialog(Component parentComponent,
                                     Object message,
                                     Object initialSelectionValue)
Shows a question-message dialog requesting input from the user and parented to parentComponent.
 The input value will be initialized to initialSelectionValue. The dialog is displayed on top of the Component's frame,
 and is usually positioned below the Component.

Parameters:
parentComponent - the parent Component for the dialog (podamy null)
message - the Object to display (komunikat)
initialSelectionValue - the value used to initialize the input field (co się pokazuje w polu tekstowym dialogu)
Zad. 3 (łatwe - 2 p.)
Napisać funkcję List apply(List l, Closure c), która każdy element listy l transformuje za pomocą domknięcie c i zwraca
 listę transformowanych wartości. Przetestować dla różnych list i różnych domknięć


Zad. 4 (trudniejsze - 5 p.)
Uogólnić funkcję z zadania 4, tak by wprowadzane mogły być dowolne liczby i słowa (napisy rozdzielone białymi znakami),
 a ich poprawność weryfikowana za pomocą przekazanego funkcji domknięcia.
Niech funkcja nazywa sie getData.
Przykładowe wywołania:

getData(Integer) { it > 0 }            // liczby całkowite większe od 0
println getData() { it.size() > 3 }   // słowa o długości większej od 3 (domyślny typ: String)
println getData()                          // dowolne napisy (słowa)
println getData(BigDecimal)         // dowolne liczby



Zad. 5 - wlasne konstrukcje iteracyjne (badawcze trochę) - 5 p.

Zapewnić iterowanie na Iterable za pomocą metody eachTuple, umożliwiającej działanie podanego domknięcia na kolejnych
 n-kach elemntow. Liczba n wynikać ma z liczby argumentów domknięcia.
W "płaskiej" definicji skryptowej można by jej uzywać np. tak

def list = (1..40)

eachTuple(list) { e1, e2, e3, e4 ->
  println "$e1 $e2 $e3 $e4"
}

def s = 'asia ma kota i psa'

def out = new StringBuffer()
eachTuple(s) { a,b ->
  out << b << a
}
println out

Wypisze:
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
17 18 19 20
21 22 23 24
25 26 27 28
29 30 31 32
33 34 35 36
37 38 39 40
saaim  aokati p as


Zad. 6 - badawcze trochę - 5p.

Przedstawić ciekawe i praktycznie użyteczne zastosowania trampoline() i memoize().






